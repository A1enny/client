import { useEffect, useState, useCallback } from "react";
import { useParams } from "react-router-dom";
import axios from "../../../Api/axios";
import socket from "../../../Api/socket";
import Navbar from "../../Layout/Navbar/Navbar";
import Sidebar from "../../Layout/Sidebar/Sidebar";
import "./TableDetails.scss";
import Swal from "sweetalert2";

const API_URL = import.meta.env.VITE_API_URL;

const TableDetails = () => {
  const { table_id } = useParams();
  const [table, setTable] = useState(null);
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isPaid, setIsPaid] = useState(false);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞
  const fetchTableDetails = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(`${API_URL}/api/tables/${table_id}`);
      if (response.data) {
        setTable(response.data);
      } else {
        throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞");
      }
    } catch (error) {
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞", "error");
    } finally {
      setIsLoading(false);
    }
  }, [table_id]);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
  const fetchOrders = useCallback(async () => {
    try {
      const response = await axios.get(`${API_URL}/api/orders/${table_id}`);
      if (response.data.success) {
        const formattedOrders = response.data.orders.map((order) => ({
          id: order.order_item_id, // ‡πÉ‡∏ä‡πâ order_item_id ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
          itemName: order.itemName,
          quantity: order.quantity,
          price: parseFloat(order.price) || 0, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
          subtotal: parseFloat(order.subtotal) || 0, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
        }));
        setOrders(formattedOrders);
      } else {
        throw new Error("Invalid order data");
      }
    } catch (error) {
      Swal.fire("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
    }
  }, [table_id]);

  useEffect(() => {
    fetchTableDetails();
    fetchOrders();

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time
    socket.on("new_order", (newOrder) => {
      if (newOrder.table_id === parseInt(table_id)) {
        setOrders((prevOrders) => [...prevOrders, newOrder]);
      }
    });

    return () => {
      socket.off("new_order");
    };
  }, [table_id, fetchTableDetails, fetchOrders]);

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
  const calculateTotal = () => {
    if (!orders || orders.length === 0) return "0.00";
    return orders.reduce((acc, order) => acc + order.subtotal, 0).toFixed(2);
  };

  const handleCancelOrder = async (orderItemId) => {
    console.log(`üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö order_item_id: ${orderItemId}`); // Debugging log

    if (!orderItemId) {
      Swal.fire(
        "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        "Order ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        "error"
      );
      return;
    }

    const confirm = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ?",
      text: "‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (confirm.isConfirmed) {
      try {
        const response = await axios.delete(
          `${API_URL}/api/orders/item/${orderItemId}`
        );

        if (response.data.success) {
          console.log(`‚úÖ ‡∏•‡∏ö order_item_id: ${orderItemId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`); // Debugging log

          Swal.fire(
            "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
            "success"
          );

          // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô React state
          setOrders((prevOrders) =>
            prevOrders.filter((order) => order.id !== orderItemId)
          );
        } else {
          Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
        }
      } catch (error) {
        console.error("‚ùå Error canceling order:", error);
        Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "error");
      }
    }
  };

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  const handlePaymentConfirm = async () => {
    try {
      const response = await axios.put(
        `${API_URL}/api/orders/confirm-payment`,
        { table_id }
      );
      if (response.data.success) {
        Swal.fire("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
        setOrders([]);
        setIsPaid(true);
      } else {
        Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
      }
    } catch (error) {
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
    }
  };

  if (isLoading) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  if (!table) return <p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞</p>;

  return (
    <div className="TableDetails-container">
      <Navbar />
      <Sidebar />
      <div className="TableDetails-content">
        <div className="table-info">
          <h1>‡πÇ‡∏ï‡πä‡∏∞ {table?.table_number || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</h1>
          <p>
            <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {table?.status || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
          </p>
          <p>
            <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á:</strong> {table?.seats || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} ‡∏ó‡∏µ‡πà
          </p>
        </div>

        <h2>üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>
        {orders.length > 0 ? (
          <div className="order-list">
            {orders.map((order, index) => (
              <div key={index} className="order-card">
                <p>
                  <strong>{order.itemName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</strong>
                </p>
                <p>
                  {order.quantity} x {order.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó
                </p>
                <p>‡∏£‡∏ß‡∏°: {order.subtotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                <button
                  onClick={() => handleCancelOrder(order.id)}
                  className="btn-cancel"
                >
                  ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            ))}
            <div className="total-amount">
              <p>
                üí∞ <strong>‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</strong> {calculateTotal()} ‡∏ö‡∏≤‡∏ó
              </p>
            </div>
          </div>
        ) : (
          <p className="no-orders">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
        )}

        {!isPaid && (
          <button onClick={handlePaymentConfirm} className="btn-confirm">
            ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </button>
        )}
      </div>
    </div>
  );
};

export default TableDetails;
