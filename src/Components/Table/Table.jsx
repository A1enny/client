import { useEffect, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../Api/axios";
import Swal from "sweetalert2";
import { QRCodeCanvas } from "qrcode.react";
import Sidebar from "../Layout/Sidebar/Sidebar";
import Navbar from "../Layout/Navbar/Navbar";
import "./Table.scss";

const API_URL = import.meta.env.VITE_API_URL;

const Table = () => {
  const [tables, setTables] = useState([]);
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [newTable, setNewTable] = useState({ table_number: "", seats: "" });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const searchTimeout = useRef(null);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å API
  const fetchTables = async () => {
    setLoading(true);
    try {
      let url = `${API_URL}/api/tables`;
      const queryParams = [];
      if (search) queryParams.push(`search=${encodeURIComponent(search)}`);
      if (statusFilter)
        queryParams.push(`status=${encodeURIComponent(statusFilter)}`);
      if (queryParams.length > 0) url += `?${queryParams.join("&")}`;

      const response = await axios.get(url);
      setTables(response.data);
    } catch (error) {
      console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // ‚úÖ ‡πÉ‡∏ä‡πâ debounce ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î API calls
    if (searchTimeout.current) clearTimeout(searchTimeout.current);
    searchTimeout.current = setTimeout(() => {
      fetchTables();
    }, 500);
  }, [search, statusFilter]);

  useEffect(() => {
    // ‚úÖ EventSource ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time
    const eventSource = new EventSource(`${API_URL}/api/tables/updates`);
    eventSource.onmessage = (event) => {
      setTables(JSON.parse(event.data));
    };

    return () => {
      eventSource.close();
    };
  }, []);

  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ fetch ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const updateTableStatus = (tableId, newStatus) => {
    setTables((prevTables) =>
      prevTables.map((table) =>
        table.table_id === tableId ? { ...table, status: newStatus } : table
      )
    );
  };

  const handleAction = async (url, successMessage, tableId, newStatus) => {
    try {
      await axios.put(url);
      Swal.fire({
        title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: successMessage,
        icon: "success",
        timer: 1500,
        showConfirmButton: false,
      });
      updateTableStatus(tableId, newStatus);
    } catch (error) {
      console.error("‚ùå Error:", error.response?.data || error.message);
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
    }
  };

  const handleAddTable = async () => {
    if (!newTable.table_number || !newTable.seats) {
      Swal.fire("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "", "error");
      return;
    }

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ã‡πâ‡∏≥
    if (tables.some((t) => t.table_number === newTable.table_number)) {
      Swal.fire("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!", "", "error");
      return;
    }

    try {
      const response = await axios.post(`${API_URL}/api/tables`, {
        ...newTable,
        status: "available",
      });

      Swal.fire("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "", "success");
      setIsModalOpen(false);
      setTables((prev) => [...prev, response.data]); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    } catch (error) {
      console.error("‚ùå Error:", error);
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
    }
  };

  return (
    <div className="Table-container">
      <Navbar />
      <Sidebar />
      <div className="Table-content">
        <h1>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>

        <button className="add-table-btn" onClick={() => setIsModalOpen(true)}>
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞
        </button>

        <div className="table-controls">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ï‡πä‡∏∞..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            <option value="available">Available</option>
            <option value="in-use">In Use</option>
          </select>
        </div>

        {loading ? (
          <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        ) : (
          <table className="Table-data">
            <thead>
              <tr>
                <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>QR Code</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {tables.map((table) => (
                <tr key={table.table_id}>
                  <td>{table.table_number}</td>
                  <td>{table.seats}</td>
                  <td>
                    <span className={`status ${table.status}`}>
                      {table.status}
                    </span>
                  </td>
                  <td>
                    <QRCodeCanvas
                      value={`${window.location.origin}/order/${table.table_id}?guest=true`}
                      size={100}
                    />
                  </td>
                  <td>
                    <div className="button-group">
                      {table.status === "available" && (
                        <button
                          className="start-btn"
                          onClick={() =>
                            handleAction(
                              `${API_URL}/api/tables/${table.table_id}/start`,
                              "‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                              table.table_id,
                              "in-use"
                            )
                          }
                        >
                          ‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                        </button>
                      )}
                      {table.status === "in-use" && (
                        <button
                          className="reset-btn"
                          onClick={() =>
                            handleAction(
                              `${API_URL}/api/tables/${table.table_id}/reset`,
                              "‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß",
                              table.table_id,
                              "available"
                            )
                          }
                        >
                          üîÑ ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏ï‡πä‡∏∞
                        </button>
                      )}
                      <button
                        onClick={() =>
                          navigate(`/table-details/${table.table_id}`)
                        }
                      >
                        ‚ÑπÔ∏è ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                      </button>
                      <button
                        className="delete-button"
                        onClick={() =>
                          handleAction(
                            `${API_URL}/api/tables/${table.table_id}/delete`,
                            "‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                            table.table_id
                          )
                        }
                      >
                        üóë ‡∏•‡∏ö
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      {isModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h2>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà</h2>
            <input
              type="text"
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞"
              value={newTable.table_number}
              onChange={(e) =>
                setNewTable({ ...newTable, table_number: e.target.value })
              }
            />
            <input
              type="number"
              placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á"
              value={newTable.seats}
              onChange={(e) =>
                setNewTable({ ...newTable, seats: e.target.value })
              }
            />
            <button onClick={handleAddTable}>‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞</button>
            <button onClick={() => setIsModalOpen(false)}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Table;
