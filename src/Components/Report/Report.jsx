import React, { useState, useEffect } from "react";
import Navbar from "../Layout/Navbar/Navbar";
import Sidebar from "../Layout/Sidebar/Sidebar";
import axios from "axios";
import * as XLSX from "xlsx";
import { ReportPDF } from "./ReportPDF"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ReportPDF
import "./Report.scss";

const API_URL = import.meta.env.VITE_API_URL;

const Report = () => {
  const [reports, setReports] = useState([]);
  const [filteredReports, setFilteredReports] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    setLoading(true);
    setError(null);
    try {
      const salesDaily = await axios.get(`${API_URL}/api/report/sales/daily`);
      const salesByMenu = await axios.get(
        `${API_URL}/api/report/sales/by-menu`
      );

      const formattedReports = [
        ...salesDaily.data.map((item) => ({
          name: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
          date: item.date,
          type: "PDF",
          total_sales: item.total_sales,
        })),
        ...salesByMenu.data.map((item) => ({
          name: `‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π: ${item.menu_name}`,
          date: new Date().toISOString().split("T")[0],
          type: "Excel",
          total_sales: item.total_sales,
        })),
      ];

      setReports(formattedReports);
      setFilteredReports(formattedReports);
    } catch (error) {
      console.error("‚ùå Error fetching reports:", error);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filterReports = () => {
    return reports.filter((report) => {
      const matchesSearch = report.name
        .toLowerCase()
        .includes(searchTerm.toLowerCase());
      const matchesDate =
        (!startDate || report.date >= startDate) &&
        (!endDate || report.date <= endDate);
      return matchesSearch && matchesDate;
    });
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel
  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(filteredReports);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Reports");
    XLSX.writeFile(wb, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô.xlsx");
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Docs
  const exportToGoogleDocs = () => {
    const docContent = `
    ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    ----------------------
    ${filteredReports
      .map((r) => `${r.name} | ${r.date} | ${r.total_sales} ‡∏ö‡∏≤‡∏ó`)
      .join("\n")}
  `;
    const url = `https://docs.google.com/document/create?usp=docs_web`;
    window.open(url, "_blank");
    // Send the content to Google Docs API or convert it to a .txt file and send
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets
  const exportToGoogleSheets = () => {
    const url = `https://docs.google.com/spreadsheets/create?usp=docs_web`;
    window.open(url, "_blank");
  };

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    setFilteredReports(filterReports());
  }, [searchTerm, startDate, endDate, reports]);

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const resetFilters = () => {
    setSearchTerm("");
    setStartDate("");
    setEndDate("");
  };

  return (
    <div className="report-container">
      <Navbar />
      <Sidebar />
      <div className="report-content">
        <div className="reportheader">
          <h1>‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h1>
        </div>
        <div className="report-filters">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
          />
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
          />
          <button className="refresh" onClick={fetchReports}>
            üîÑ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
          </button>
          <button className="reset" onClick={resetFilters}>
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          </button>
        </div>
        {loading && <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>}
        {error && <div className="error-message">{error}</div>}
        <div className="export-buttons">
          <button
            className="export-pdf-button"
            onClick={() => ReportPDF(filteredReports)}
          >
            üìÑ PDF
          </button>
          <button className="export-excel-button" onClick={exportExcel}>
            üìä Excel
          </button>
        </div>
        <table className="report-table">
          <thead>
            <tr>
              <th>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå</th>
              <th>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</th>
            </tr>
          </thead>
          <tbody>
            {filteredReports.length > 0 ? (
              filteredReports.map((report, index) => (
                <tr key={index}>
                  <td>{report.name}</td>
                  <td>{report.date}</td>
                  <td>{report.type}</td>
                  <td>{report.total_sales} ‡∏ö‡∏≤‡∏ó</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Report;
