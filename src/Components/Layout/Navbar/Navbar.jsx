import "./Navbar.scss";
import { MdNotifications, MdArrowDropDown } from "react-icons/md";
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../../Api/axios";


const Navbar = () => {
  const navigate = useNavigate();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [username, setUsername] = useState("Guest");
  const [profileImage, setProfileImage] = useState("");
  const [role, setRole] = useState(""); 

  useEffect(() => {
    const storedUserId = localStorage.getItem("user_id");
    const storedUsername = localStorage.getItem("username");
    const storedProfileImage = localStorage.getItem("profileImage");
    const storedRole = localStorage.getItem("role"); 

    if (storedUsername) setUsername(storedUsername);
    if (storedProfileImage) setProfileImage(storedProfileImage);
    if (storedRole) setRole(storedRole); 

    if (storedUserId) {
      fetchUserProfile(storedUserId);
    }
  }, []);

  // ‚úÖ ‡πÉ‡∏ä‡πâ useEffect ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á profileImage ‡πÅ‡∏•‡∏∞ LocalStorage
  useEffect(() => {
    const handleStorageChange = () => {
      const updatedProfileImage = localStorage.getItem("profileImage");
      if (updatedProfileImage) {
        setProfileImage(updatedProfileImage);
      }
    };

    window.addEventListener("storage", handleStorageChange);
    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, []);

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ profileImage ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Navbar ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  useEffect(() => {
    const storedProfileImage = localStorage.getItem("profileImage");
    if (storedProfileImage) {
      setProfileImage(storedProfileImage);
    }
  }, [profileImage]);

  const fetchUserProfile = async (userId) => {
    try {
      const res = await axios.get(
        `http://localhost:3002/api/users/profile/${userId}`
      );
      setUsername(res.data.username);
      setProfileImage(res.data.profile_image);
      setRole(res.data.role);

      // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Local Storage ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      localStorage.setItem("username", res.data.username);
      localStorage.setItem("profileImage", res.data.profile_image);
      localStorage.setItem("role", res.data.role);
    } catch (error) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
  };

  const handleLogout = () => {
    localStorage.clear();
    setUsername("Guest");
    setProfileImage("");
    setRole("");
    navigate("/");
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
  const formattedProfileImage = profileImage?.startsWith("http")
    ? profileImage
    : `http://localhost:3002${profileImage}`;

  return (
    <div className="navbar-container">
      <div className="right-section">
        <MdNotifications size={24} className="icon" />
        <div className="user-dropdown" onClick={() => setIsDropdownOpen(!isDropdownOpen)}>
          <img
            src={formattedProfileImage ? formattedProfileImage : "/default-avatar.png"}
            alt="Profile"
            className="profile-pic"
          />
          <span className="user-name">{username}</span>
          <MdArrowDropDown size={24} className="icon" />
          {isDropdownOpen && (
            <div className="dropdown-menu">
              <a href="/ProfileSettings">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</a>
              {role === "admin" && <a href="/ManageUsers">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</a>}
              <a href="/" onClick={handleLogout}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Navbar;
