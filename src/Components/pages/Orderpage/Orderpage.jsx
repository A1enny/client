import { useState, useEffect } from "react"; 
import { useParams, useSearchParams } from "react-router-dom";
import axios from "../../../Api/axios";
import Swal from "sweetalert2";
import "./Orderpage.scss";

const API_URL = import.meta.env.VITE_API_URL;

const OrderPage = () => {
  const { tableId } = useParams();
  const [searchParams] = useSearchParams();
  const isGuest = searchParams.get("guest") === "true";

  const [menu, setMenu] = useState([]);
  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(true);

  const generateSessionId = () => {
    return 'session-' + Math.random().toString(36).substr(2, 9);  // ‡∏™‡∏£‡πâ‡∏≤‡∏á session_id ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  };
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ session_id ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô sessionStorage
  if (!sessionStorage.getItem('session_id')) {
    sessionStorage.setItem('session_id', generateSessionId());
  }
  
  // ‡∏î‡∏∂‡∏á session_id ‡∏à‡∏≤‡∏Å sessionStorage
  const session_id = sessionStorage.getItem('session_id');
  
  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const response = await axios.get(`${API_URL}/api/menus`);
        if (response.data && response.data.results && response.data.results.length > 0) {
          setMenu(response.data.results);
          console.log("Fetched Menu:", response.data.results); // Log response to check
        } else {
          Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π");
        }
      } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ:", error);
        Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π");
      } finally {
        setLoading(false);
      }
    };
  
    fetchMenu();
  }, []);
  
  const removeFromCart = (menuId) => {
    setCart((prevCart) =>
      prevCart
        .map((i) => (i.menu_id === menuId ? { ...i, quantity: i.quantity - 1 } : i))
        .filter((i) => i.quantity > 0)
    );
  };

  const addToCart = (item) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡∏°‡∏µ menu_id ‡πÅ‡∏•‡∏∞ price ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (!item.menu_id || !item.price) {
      console.log("Item missing menu_id or price:", item);
      return;
    }
  
    console.log("Adding to cart:", item);  // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
    setCart((prevCart) => {
      const existingItem = prevCart.find((i) => i.menu_id === item.menu_id);
      if (existingItem) {
        return prevCart.map((i) =>
          i.menu_id === item.menu_id ? { ...i, quantity: i.quantity + 1 } : i
        );
      } else {
        return [...prevCart, { ...item, quantity: 1 }];
      }
    });
  };
  
  const handleOrder = async () => {
    if (cart.length === 0) {
      Swal.fire("‚ö†Ô∏è ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "warning");
      return;
    }
  
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ menu_id ‡πÅ‡∏•‡∏∞ price ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
    if (!cart[0].menu_id || !cart[0].price) {
      Swal.fire("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "warning");
      console.log("Item missing menu_id or price:", cart[0]);  // ‡πÉ‡∏ä‡πâ console.log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      return;
    }
  
    const orderData = {
      table_id: tableId,  
      session_id: sessionStorage.getItem('session_id'),  // ‡∏î‡∏∂‡∏á session_id ‡∏à‡∏≤‡∏Å sessionStorage
      menu_id: cart[0].menu_id,  // menu_id ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      quantity: cart[0].quantity,  // quantity ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      price: parseFloat(cart[0].price)  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ price ‡πÄ‡∏õ‡πá‡∏ô number ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string
    };
  
    console.log("Order Data ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ:", orderData);
  
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà backend
      await axios.post(`${API_URL}/api/orders`, orderData);
      Swal.fire("‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß", "success");
      setCart([]); 
    } catch (error) {
      console.error("‚ùå ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
    }
  };
  
  
  return (
    <div className="order-container">
      <h1 className="title">üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>
      <p className="table-info">üìå ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà: {tableId}</p>

      {loading ? <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π...</p> : (
        <div className="menu-grid">
          {menu.map((item) => (
            <div key={item.menu_id} className="menu-card">
              <img src={item.image_url || "/default_image.jpg"} alt={item.menu_name} className="menu-img" />
              <h2>{item.menu_name}</h2>
              <p className="price">‡∏ø{item.price}</p>
              <button className="add-btn" onClick={() => addToCart(item)}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</button>
            </div>
          ))}
        </div>
      )}

      {/* ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
      <div className="cart">
        <h2>üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h2>
        {cart.length === 0 ? <p>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á</p> : (
          <ul>
            {cart.map((item) => (
              <li key={item.menu_id}>
                {item.menu_name} x {item.quantity}  
                <button className="remove-btn" onClick={() => removeFromCart(item.menu_id)}>‡∏•‡∏ö</button>
              </li>
            ))}
          </ul>
        )}
        <button className="order-btn" onClick={handleOrder}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</button>
      </div>
    </div>
  );
};

export default OrderPage;
