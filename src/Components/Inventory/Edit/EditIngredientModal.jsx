import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import axios from "../../../Api/axios";
import Swal from "sweetalert2";
import "./EditIngredientModal.scss";

const EditIngredientModal = ({ material, onClose, onSave }) => {
  const [formData, setFormData] = useState({
    material_id: "",
    material_name: "",
    category_id: "",
    stock: "",
    min_stock: "",
    received_date: "",
    expiration_date: "",
  });

  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await axios.get("/api/categories");
        setCategories(res.data || []);
      } catch (error) {
        console.error(
          "‚ùå Error fetching categories:",
          error.response?.data || error.message
        );
      }
    };

    fetchCategories();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠ `material` ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    const fetchMaterial = async () => {
      if (!material?.material_id) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ material_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

      try {
        setLoading(true);
        const response = await axios.get(
          `/api/materials/${material.material_id}`
        );

        console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ:", response.data); // ‚úÖ Debug

        if (response.data.success) {
          const data = response.data.material;
          setFormData({
            material_id: data.material_id || "",
            material_name: data.material_name || "",
            category_id: data.category_id ? String(data.category_id) : "", // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
            stock: data.stock !== null ? parseFloat(data.stock) : 0, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ null
            min_stock: data.min_stock !== null ? parseFloat(data.min_stock) : 0, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ null
            received_date: data.received_date
              ? data.received_date.split("T")[0]
              : "", // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            expiration_date: data.expiration_date
              ? data.expiration_date.split("T")[0]
              : "", // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
          });
        }
      } catch (error) {
        console.error("‚ùå Error fetching material:", error);
        Swal.fire(
          "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö",
          "error"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchMaterial();
  }, [material]); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ material ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e) => {
    const { name, value } = e.target;

    if (["stock", "min_stock"].includes(name)) {
      if (value === "") {
        setFormData((prev) => ({ ...prev, [name]: "" })); // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ input ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
      } else {
        const newValue = parseFloat(value);
        if (!isNaN(newValue) && newValue >= 0) {
          setFormData((prev) => ({ ...prev, [name]: newValue }));
        }
      }
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (
      !formData.material_id ||
      !formData.material_name.trim() ||
      !formData.category_id ||
      parseFloat(formData.stock) <= 0
    ) {
      Swal.fire(
        "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
        "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á, ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
        "warning"
      );
      return;
    }

    try {
      setLoading(true);
      const response = await axios.put(
        `/api/materials/${formData.material_id}`,
        {
          name: formData.material_name.trim(),
          category_id: formData.category_id,
          stock: parseFloat(formData.stock),
          min_stock: parseFloat(formData.min_stock),
          received_date: formData.received_date || null,
          expiration_date: formData.expiration_date || null,
        }
      );

      if (response.data.success) {
        Swal.fire("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", response.data.message, "success");
        if (onSave) onSave();
        if (onClose) onClose();
      } else {
        throw new Error(response.data.error || "‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }
    } catch (error) {
      console.error("‚ùå Error updating material:", error);
      Swal.fire(
        "‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö",
        "error"
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-container">
        <h2>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:</label>
            <input
              type="text"
              name="material_name"
              value={formData.material_name}
              onChange={handleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</label>
            <select
              name="category_id"
              value={formData.category_id}
              onChange={handleChange}
              required
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
              {categories.map((category) => (
                <option
                  key={category.category_id}
                  value={String(category.category_id)}
                >
                  {category.category_name}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° (g):</label>
            <input
              type="number"
              name="stock"
              value={formData.stock}
              onChange={handleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (g):</label>
            <input
              type="number"
              name="min_stock"
              value={formData.min_stock}
              onChange={handleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤:</label>
            <input
              type="date"
              name="received_date"
              value={formData.received_date || ""}
              onChange={handleChange}
            />
          </div>

          <div className="form-group">
            <label>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</label>
            <input
              type="date"
              name="expiration_date"
              value={formData.expiration_date || ""}
              onChange={handleChange}
            />
          </div>

          <div className="modal-actions">
            <button type="submit" className="save-btn" disabled={loading}>
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
            </button>
            <button
              type="button"
              className="cancel-btn"
              onClick={onClose}
              disabled={loading}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

EditIngredientModal.propTypes = {
  material: PropTypes.shape({
    material_id: PropTypes.number.isRequired,
    material_name: PropTypes.string.isRequired,
    category_id: PropTypes.number.isRequired,
    stock: PropTypes.number.isRequired,
    min_stock: PropTypes.number,
    received_date: PropTypes.string,
    expiration_date: PropTypes.string,
  }),
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
};

export default EditIngredientModal;
