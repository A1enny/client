import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../Api/axios";
import Swal from "sweetalert2";
import Navbar from "../Layout/Navbar/Navbar";
import Sidebar from "../Layout/Sidebar/Sidebar";
import "./Inventory.scss";
import EditIngredientModal from "./Edit/EditIngredientModal";
import InventoryTable from "./InventoryTable";

const Inventory = () => {
  const [activeTab, setActiveTab] = useState("normal");
  const [data, setData] = useState([]);
  const [categories, setCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [selectedIngredient, setSelectedIngredient] = useState(null);
  const navigate = useNavigate();

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  const fetchData = async () => {
    setLoading(true);
    try {
      const params = {
        page: currentPage,
        limit: 10,  // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        search: searchTerm || undefined,
        category: selectedCategory || undefined,
      };

      let response;
      if (activeTab === "batches") {
        response = await axios.get("/api/inventory", { params });
      } else {
        response = await axios.get("/api/materials", { params });
      }

      console.log(`üìå API Response (${activeTab}):`, response.data);

      let materials = response.data.results || [];

      if (activeTab === "expired") {
        const today = new Date();
        const next7Days = new Date();
        next7Days.setDate(today.getDate() + 7);

        materials = materials.filter((item) => {
          const expDate = new Date(item.expiration_date);
          return expDate < today || (expDate >= today && expDate <= next7Days);
        });
      }

      // ‚úÖ ‡∏ï‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      setData(materials.slice(0, 10));

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ totalPages ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      setTotalPages(Math.max(1, Math.ceil((response.data.total || materials.length) / 10)));

    } catch (error) {
      console.error(`‚ùå Error fetching data (${activeTab}):`, error);
      setData([]);
      setTotalPages(1);
    } finally {
      setLoading(false);
    }
};


  // üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô fetchData ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà activeTab, searchTerm, selectedCategory, ‡∏´‡∏£‡∏∑‡∏≠ currentPage ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    fetchData();
  }, [activeTab, searchTerm, selectedCategory, currentPage]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await axios.get("/api/categories");
        setCategories(res.data || []);
      } catch (error) {
        console.error("‚ùå Error fetching categories:", error);
      }
    };
    fetchCategories();
  }, []);

  const [batchDetails, setBatchDetails] = useState([]);
  const [batchModalOpen, setBatchModalOpen] = useState(false);

  const handleViewBatch = async (batch) => {
    try {
      const response = await axios.get(`/api/inventory/${batch.batch_id}`);

      if (
        !response.data ||
        !Array.isArray(response.data.results) ||
        response.data.results.length === 0
      ) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï");
      }

      console.log("üìå Batch Details:", response.data.results);
      setBatchDetails([...response.data.results]); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô State ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      setBatchModalOpen(true);
    } catch (error) {
      console.error("‚ùå Error fetching batch details:", error);
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "error");
      setBatchDetails([]); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏à‡∏≠‡∏Ç‡∏≤‡∏ß
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  const handleEditIngredient = (ingredient) => {
    console.log("üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:", ingredient);
    setSelectedIngredient(ingredient);
    setEditModalOpen(true);
  };

  const handleDeleteIngredient = async (id) => {
    if (!id) {
      console.error("‚ùå ID is undefined!");
      Swal.fire("‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "ID ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error");
      return;
    }

    const confirm = await Swal.fire({
      title: "‚ö† ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö?",
      text: "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!confirm.isConfirmed) return;

    try {
      await axios.delete(`/api/materials/${id}`);
      Swal.fire("‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", "success");

      setData((prev) => prev.filter((item) => item.material_id !== id));
    } catch (error) {
      console.error("‚ùå Error deleting:", error);
      Swal.fire(
        "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        error.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        "error"
      );
    }
  };

  const handleDeleteBatch = async (batchId) => {
    if (!batchId) {
      console.error("‚ùå Batch ID is undefined!");
      Swal.fire("‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "ID ‡∏Ç‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error");
      return;
    }

    const confirm = await Swal.fire({
      title: "‚ö† ‡∏•‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö?",
      text: "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!confirm.isConfirmed) return;

    try {
      await axios.delete(`/api/inventory/${batchId}`);
      Swal.fire("‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", "success");

      setData((prev) => prev.filter((item) => item.batch_id !== batchId));
    } catch (error) {
      console.error("‚ùå Error deleting batch:", error);
      Swal.fire(
        "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        error.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        "error"
      );
    }
  };

  const handlePageChange = (newPage) => {
    if (newPage < 1 || newPage > totalPages) return;
    setCurrentPage(newPage);
  };
  

  return (
    <div className="Inventory-container">
      <Navbar />
      <Sidebar />
      <div className="Inventory-content">
        <div className="Header">
          <h1>üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h1>
          <button
            className="add-button"
            onClick={() => navigate("/AddInventory")}
          >
            + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </button>
        </div>

        <div className="Inventory-filters">
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
            {categories.map((category) => (
              <option key={category.category_id} value={category.category_id}>
                {category.category_name}
              </option>
            ))}
          </select>
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button
            className="clear-filter-btn"
            onClick={() => {
              setSearchTerm("");
              setSelectedCategory("");
            }}
          >
            ‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </button>
        </div>

        <div className="tab-navigation">
          {[
            { key: "batches", label: "üîñ ‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" },
            { key: "normal", label: "üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" },
            { key: "expired", label: "‚ö†Ô∏è ‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" },
          ].map((tab) => (
            <button
              key={tab.key}
              className={activeTab === tab.key ? "active" : ""}
              onClick={() => setActiveTab(tab.key)}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {loading ? (
          <div className="loading-container">
            <p>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        ) : data.length > 0 ? (
          <>
            <InventoryTable
              activeTab={activeTab}
              data={data}
              onEditIngredient={handleEditIngredient}
              onDeleteIngredient={handleDeleteIngredient}
              onDeleteBatch={handleDeleteBatch}
              onViewBatch={
                activeTab === "batches" ? handleViewBatch : undefined
              } // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏ï
            />

            <div className="pagination">
              <button className="prev"
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
              >
              ‚óÄÔ∏è
              </button>
              <span>
                ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}
              </span>
              <button className="next"
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
              >
              ‚ñ∂Ô∏è
              </button>
            </div>
          </>
        ) : (
          <div className="no-data">
            <p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
          </div>
        )}

        {editModalOpen && selectedIngredient && (
          <EditIngredientModal
            ingredient={selectedIngredient}
            onClose={() => setEditModalOpen(false)}
          />
        )}
      </div>

      {batchModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h2>üì¶ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡πá‡∏≠‡∏ï #{batchDetails[0]?.batch_id}</h2>
            <table>
              <thead>
                <tr>
                  <th>üìë ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</th>
                  <th>üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</th>
                  <th>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                  <th>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤</th>
                  <th>‚è≥ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                  <th>‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {Array.isArray(batchDetails) && batchDetails.length > 0 ? (
                  batchDetails.map((item, index) => (
                    <tr key={`${item.batch_id}-${index}`}>
                      {" "}
                      {/* ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô key ‡∏ã‡πâ‡∏≥ */}
                      <td>{item.material_id}</td>
                      <td>{item.material_name}</td>
                      <td>
                        {item.price
                          ? `${parseFloat(item.price).toFixed(2)} ‡∏ø`
                          : "N/A"}
                      </td>
                      <td>
                        {item.received_date
                          ? new Date(item.received_date).toLocaleDateString(
                              "th-TH"
                            )
                          : "N/A"}
                      </td>
                      <td>
                        {item.expiration_date
                          ? new Date(item.expiration_date).toLocaleDateString(
                              "th-TH"
                            )
                          : "N/A"}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan="5"
                      style={{ textAlign: "center", color: "gray" }}
                    >
                      ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
            <button
              className="close-btn"
              onClick={() => setBatchModalOpen(false)}
            >
              ‚ùå ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Inventory;
