import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../../Api/axios"; // ‚úÖ ‡πÉ‡∏ä‡πâ axiosInstance ‡∏ó‡∏µ‡πà‡∏°‡∏µ baseURL
import Swal from "sweetalert2"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° SweetAlert2
import Navbar from "../../Layout/Navbar/Navbar";
import Sidebar from "../../Layout/Sidebar/Sidebar";
import "./Addinventory.scss";

const AddInventory = () => {
  const [ingredientName, setIngredientName] = useState("");
  const [categories, setCategories] = useState([]);
  const [categoryId, setCategoryId] = useState("");
  const [quantity, setQuantity] = useState("");
  const [loading, setLoading] = useState(false); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Loading state
  const [error, setError] = useState(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Error state
  const navigate = useNavigate();

  // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    const fetchCategories = async () => {
      setError(null);
      try {
        const res = await axios.get("/categories");
        setCategories(res.data || []);
      } catch (error) {
        setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ");
        console.error("‚ùå Error fetching categories:", error.response?.data || error.message);
      }
    };
    fetchCategories();
  }, []);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  const handleAddIngredient = async (e) => {
    e.preventDefault();

    if (!ingredientName.trim() || !categoryId || !quantity) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á!",
      });
      return;
    }

    const quantityInGrams = parseFloat(quantity);
    if (isNaN(quantityInGrams) || quantityInGrams <= 0) {
      Swal.fire({
        icon: "error",
        title: "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        text: "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0!",
      });
      return;
    }

    setLoading(true);
    try {
      await axios.post("/ingredients", {
        ingredient_name: ingredientName.trim(),
        category_id: parseInt(categoryId, 10),
        quantity: quantityInGrams,
      });

      Swal.fire({
        icon: "success",
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: `${ingredientName} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`,
        showConfirmButton: false,
        timer: 2000,
      }).then(() => {
        navigate("/inventory");
      });
    } catch (error) {
      console.error("‚ùå Error adding ingredient:", error.response?.data || error.message);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="add-inventory-container">
      <Navbar />
      <Sidebar />
      <div className="add-inventory-content">
        <h2>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà</h2>

        {/* ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
        {error && <p style={{ color: "red", fontWeight: "bold" }}>{error}</p>}

        <form className="add-inventory-form">
          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö */}
          <div className="form-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:</label>
            <input
              type="text"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
              value={ingredientName}
              onChange={(e) => setIngredientName(e.target.value)}
              required
            />
          </div>

          {/* ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
          <div className="form-group">
            <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</label>
            <select value={categoryId} onChange={(e) => setCategoryId(e.target.value)} required>
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
              {categories.map((category) => (
                <option key={category.category_id} value={category.category_id}>
                  {category.category_name}
                </option>
              ))}
            </select>
          </div>

          {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö */}
          <div className="form-group">
            <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏Å‡∏£‡∏±‡∏°):</label>
            <input
              type="number"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
              required
            />
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î */}
          <div className="button-group">
            <button type="button" className="submit-btn" onClick={handleAddIngredient} disabled={loading}>
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°..." : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"}
            </button>
            <button type="button" className="cancel-btn" onClick={() => navigate("/inventory")}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddInventory;
