import { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import "../Dashboard/Dashboard.scss";
import Navbar from "../Layout/Navbar/Navbar";
import Sidebar from "../Layout/Sidebar/Sidebar";
import PieChartComponent from "../Dashboard/piechart"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Pie chart component ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";

const API_URL = import.meta.env.VITE_API_URL;

const Dashboard = () => {
  const [summary, setSummary] = useState({});
  const [lineData, setLineData] = useState([]);
  const [topProducts, setTopProducts] = useState([]);
  const [recentOrders, setRecentOrders] = useState([]);
  const [lowStock, setLowStock] = useState([]);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const [
          summaryRes,
          pieRes,
          lineRes,
          ordersRes,
          stockRes,
          topProductsRes,
        ] = await Promise.all([
          axios.get(`${API_URL}/api/sales/summary`),
          axios.get(`${API_URL}/api/sales/pie`),
          axios.get(`${API_URL}/api/sales/line`),
          axios.get(`${API_URL}/api/orders/recent`),
          axios.get(`${API_URL}/api/inventory/low-stock`),
          axios.get(`${API_URL}/api/menus/top`),
        ]);

        console.log("recentOrders: ", ordersRes.data); // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å recentRes ‡πÄ‡∏õ‡πá‡∏ô ordersRes
        console.log("Summary Data: ", summaryRes.data); // Debugging summary data
        console.log("Pie Data:", pieRes.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Pie ‡∏à‡∏≤‡∏Å API
        console.log("Low Stock Data: ", stockRes.data);

        setSummary(summaryRes.data);
        setLineData(lineRes.data);
        setRecentOrders(ordersRes.data);
        setLowStock(stockRes.data);
        setTopProducts(topProductsRes.data);
      } catch (error) {
        Swal.fire("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
      }
    };

    fetchDashboardData();
  }, []);

  return (
    <div className="Navbar-container">
      <Navbar />
      <div className="dashboard-container">
        <Sidebar />
        <div className="dashboard-content">
          <div className="dashboardHeader">
            <h2>‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h2>
            <p>‡πÅ‡∏°‡∏ß‡∏°‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô</p>
          </div>

          {/* üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ */}
          <div className="infoCards">
            {[
              {
                title: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
                value: summary.total_sales || 0,
                unit: "‡∏ö‡∏≤‡∏ó",
              },
              {
                title: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                value: summary.total_orders || 0,
                unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
              },
              {
                title: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                value: summary.total_customers || 0,
                unit: "‡∏£‡∏≤‡∏¢",
              },
              {
                title: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                value: summary.average_sales_per_order || 0,
                unit: "‡∏ö‡∏≤‡∏ó",
              },
            ].map((card, index) => (
              <div className="card" key={index}>
                <h3>{card.title}</h3>
                <p>
                  {card.value} {card.unit}
                </p>
              </div>
            ))}
          </div>

          {/* üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ */}
          <div className="charts">
            <div className="chartContainer">
              <h4>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h4>
              <PieChartComponent />
            </div>

            <div className="chartContainer">
              <h4>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h4>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={lineData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="total_sales"
                    stroke="#0088FE"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* üìå ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */}
          <div className="tableContainer">
            <h4>‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h4>
            <table>
              <thead>
                <tr>
                  <th>‡πÇ‡∏ï‡πä‡∏∞</th>
                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                </tr>
              </thead>
              <tbody>
                {recentOrders.map((order, index) => (
                  <tr key={index}>
                    <td>{order.table_number}</td>
                    {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π */}
                    <td>{order.recipe_name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"}</td>
                    <td>{order.status}</td>
                    <td>{order.order_time}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* üìå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ */}
          <div className="tableContainer">
            <h4>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ</h4>
            <table>
              <thead>
                <tr>
                  <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢</th>
                  <th>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</th>
                </tr>
              </thead>
              <tbody>
                {topProducts.map((product, index) => (
                  <tr key={index}>
                    <td>{product.name}</td>
                    <td>{product.quantity_sold}</td>
                    <td>{product.total_sales}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* üìå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î */}
          <div className="tableContainer">
            <h4>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î</h4>
            <table>
              <thead>
                <tr>
                  <th>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</th>
                  <th>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                </tr>
              </thead>
              <tbody>
                {lowStock.map((item, index) => (
                  <tr key={index}>
                    <td>{item.material_name}</td>
                    <td>{item.current_quantity}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
