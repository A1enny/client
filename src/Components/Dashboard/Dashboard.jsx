import { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import "../Dashboard/Dashboard.scss";
import Navbar from "../Layout/Navbar/Navbar";
import Sidebar from "../Layout/Sidebar/Sidebar";
import {
  PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis,
  CartesianGrid, Tooltip, Legend, BarChart, Bar, ResponsiveContainer
} from "recharts";

const API_URL = import.meta.env.VITE_API_URL;

const Dashboard = () => {
  const [summary, setSummary] = useState({});
  const [pieData, setPieData] = useState([]);
  const [lineData, setLineData] = useState([]);
  const [barData, setBarData] = useState([]);
  const [topProducts, setTopProducts] = useState([]);
  const [recentOrders, setRecentOrders] = useState([]);
  const [lowStock, setLowStock] = useState([]);
  const [reservations, setReservations] = useState([]);
  const [notifications, setNotifications] = useState([]);

  const COLORS = ["#0088FE", "#FF8042", "#00C49F", "#FFBB28"];

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const [summaryRes, pieRes, lineRes, barRes, ordersRes, stockRes, reservationsRes, notificationsRes] =
          await Promise.all([
            axios.get(`${API_URL}/api/dashboard/sales/summary`),
            axios.get(`${API_URL}/api/dashboard/sales/pie`),
            axios.get(`${API_URL}/api/dashboard/sales/line`),
            axios.get(`${API_URL}/api/dashboard/sales/bar`),
            axios.get(`${API_URL}/api/dashboard/orders/recent`),
            axios.get(`${API_URL}/api/dashboard/inventory/low-stock`),
            axios.get(`${API_URL}/api/dashboard/reservations/upcoming`),
            axios.get(`${API_URL}/api/dashboard/notifications`),
          ]);

        setSummary(summaryRes.data);
        setPieData(pieRes.data);
        setLineData(lineRes.data);
        setBarData(barRes.data);
        setRecentOrders(ordersRes.data);
        setLowStock(stockRes.data);
        setReservations(reservationsRes.data);
        setNotifications(notificationsRes.data);
      } catch (error) {
        Swal.fire("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
      }
    };

    fetchDashboardData();
  }, []);

  return (
    <div className="Navbar-container">
      <Navbar />
      <div className="dashboard-container">
        <Sidebar />
        <div className="dashboard-content">
          <div className="dashboardHeader">
            <h2>‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h2>
            <p>‡πÅ‡∏°‡∏ß‡∏°‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô</p>
          </div>

          {/* üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ */}
          <div className="infoCards">
            {[
              { title: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", value: summary.total_sales || 0, unit: "‡∏ö‡∏≤‡∏ó" },
              { title: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", value: summary.total_orders || 0, unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" },
              { title: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: summary.total_customers || 0, unit: "‡∏£‡∏≤‡∏¢" },
              { title: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", value: summary.average_sales_per_order || 0, unit: "‡∏ö‡∏≤‡∏ó" }
            ].map((card, index) => (
              <div className="card" key={index}>
                <h3>{card.title}</h3>
                <p>{card.value} {card.unit}</p>
              </div>
            ))}
          </div>

          {/* üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ */}
          <div className="charts">
            <div className="chartContainer">
              <h4>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h4>
              <ResponsiveContainer width="100%" height={400}>
                <PieChart>
                  <Pie data={pieData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={120} label>
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="chartContainer">
              <h4>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h4>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={lineData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="total_sales" stroke="#0088FE" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á */}
          <div className="chartContainer">
            <h4>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á</h4>
            <ResponsiveContainer width="100%" height={250}>
              <BarChart data={barData}>
                <XAxis dataKey="channel" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="sales" fill="#0088FE" />
              </BarChart>
            </ResponsiveContainer>
          </div>

          {/* üìå ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */}
          <div className="tableContainer">
            <h4>‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h4>
            <table>
              <thead>
                <tr>
                  <th>‡πÇ‡∏ï‡πä‡∏∞</th>
                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                </tr>
              </thead>
              <tbody>
                {recentOrders.map((order, index) => (
                  <tr key={index}>
                    <td>{order.table}</td>
                    <td>{order.items}</td>
                    <td>{order.status}</td>
                    <td>{order.time}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* üìå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î */}
          <div className="tableContainer">
            <h4>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î</h4>
            <table>
              <thead>
                <tr>
                  <th>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</th>
                  <th>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                </tr>
              </thead>
              <tbody>
                {lowStock.map((item, index) => (
                  <tr key={index}>
                    <td>{item.name}</td>
                    <td>{item.quantity}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* üìå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ */}
          <div className="tableContainer">
            <h4>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞</h4>
            <table>
              <thead>
                <tr>
                  <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á</th>
                  <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                </tr>
              </thead>
              <tbody>
                {reservations.map((res, index) => (
                  <tr key={index}>
                    <td>{res.customer}</td>
                    <td>{res.seats}</td>
                    <td>{res.time}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
