const API_URL = import.meta.env.VITE_API_URL || import.meta.env.VITE_API_URL_BACKUP;

console.log("‚úÖ API URL:", API_URL);

const axiosConfig = {
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
};

// ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î SSL Reject (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Dev Mode)
if (typeof window === "undefined") {
  const https = require("https");
  axiosConfig.httpsAgent = new https.Agent({
    rejectUnauthorized: false,
  });
}

const axiosInstance = axios.create(axiosConfig);

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÉ‡∏´‡∏°‡πà
const testApiConnection = async () => {
  try {
    const response = await axiosInstance.get("/api/test");
    console.log("‚úÖ API Response:", response.data);
  } catch (error) {
    console.error("‚ùå API Error:", error);

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API URL Backup ‡∏ñ‡πâ‡∏≤ API ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    if (API_URL === import.meta.env.VITE_API_URL && import.meta.env.VITE_API_URL_BACKUP) {
      console.warn("üîÑ Switching to backup API...");
      axiosInstance.defaults.baseURL = import.meta.env.VITE_API_URL_BACKUP;
      testApiConnection();
    }
  }
};

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
testApiConnection();

export default axiosInstance;
